#!/usr/bin/python3

import os
import argparse
import mido
import logging
import configparser
import subprocess
import sys
from os.path import expanduser
from enum import Enum
from evdev import uinput, ecodes as e
from pulsectl import Pulse

class NanoKeys(Enum):
    TRACK_PREV = 58
    TRACK_NEXT = 59
    CYCLE = 46
    MARKER_SET = 60
    # ... (other keys omitted for brevity)

    LED_SUPPORT = [
        TRACK_PREV, TRACK_NEXT, CYCLE, MARKER_SET,
        # ... (other keys omitted for brevity)
    ]

class NanoLedHandler:
    def __init__(self, port=None):
        self.port = port

    def set_led(self, led=None, value=None):
        if led in NanoKeys.LED_SUPPORT:
            logging.debug(f'nano_led_handler::set: Setting led {led} to {value}')
            value = 127 if value > 0 else 0
            self.port.send(mido.Message('control_change', control=led, value=value))
        else:
            logging.debug(f'nano_led_handler::set: Key {led} has no led to set')

class NanoAction:
    def __init__(self):
        logging.error('nano_action::__init__: Not implemented!')

    def action(self, key=None, value=None):
        logging.error('nano_action::action: Not implemented!')

class NanoActionEvdev(NanoAction):
    def __init__(self, evdev_action=None, uinput=None, led_handler=None):
        self.evdev_action = evdev_action
        self.uinput = uinput
        self.led_handler = led_handler

    def action(self, key=None, value=None):
        logging.debug(f'nano_action_evdev::action: Keypress {key} value {value} triggering event {self.evdev_action}')
        try:
            self.uinput.write(e.EV_KEY, self.evdev_action, int(value / 126))
            self.led_handler.set_led(led=key, value=value)
            self.uinput.syn()
        except Exception as e:
            logging.error(f'Error in nano_action_evdev::action: {e}')

class NanoActionMute(NanoAction):
    def __init__(self, audio_device=None, pactl=None, led_handler=None):
        self.audio_device = audio_device
        self.pactl = pactl
        self.muted = audio_device.mute
        self.led_handler = led_handler

    def action(self, key=None, value=None):
        try:
            if value == 127:
                logging.debug(f'nano_action_mute::action: Value {value} for {self.audio_device.name}')
                self.muted = 1 - self.muted
                self.led_handler.set_led(led=key, value=self.muted)
                self.pactl.mute(self.audio_device, self.muted)
        except Exception as e:
            logging.error(f'Error in nano_action_mute::action: {e}')

class NanoActionVolume(NanoAction):
    def __init__(self, audio_device=None, pactl=None, max_level=100):
        self.audio_device = audio_device
        self.pactl = pactl
        self.max_level = max_level

    def action(self, key=None, value=None):
        try:
            logging.debug(f'nano_action_volume::action: Value {value} for {self.audio_device.name}')
            volume = (float(value) / 127.0) * (float(self.max_level) / 100.0)
            self.pactl.volume_set_all_chans(self.audio_device, volume)
        except Exception as e:
            logging.error(f'Error in nano_action_volume::action: {e}')

class NanoActionExec(NanoAction):
    def __init__(self, command=None):
        self.command = command

    def action(self, key=None, value=None):
        try:
            filled_command = self.command.format(NK_KEY_ID=key, NK_KEY_VALUE=value)
            logging.debug(f'nano_action_exec::action: Executing {filled_command}')
            subprocess.call(filled_command, shell=True)
        except Exception as e:
            logging.error(f'Error in nano_action_exec::action: {e}')

def get_audio_devices(pactl, sources={}, sinks={}):
    audio_devices = {}

    try:
        for sink in pactl.sink_list():
            if sink.name in sinks:
                logging.debug(f'get_audio_devices: Found sink {sinks[sink.name]} at {sink.name}')
                audio_devices[sinks[sink.name]] = sink

        for source in pactl.source_list():
            if source.name in sources:
                logging.debug(f'get_audio_devices: Found source {sources[source.name]} at {source.name}')
                audio_devices[sources[source.name]] = source
    except Exception as e:
        logging.error(f'Error in get_audio_devices: {e}')

    return audio_devices

def parse_config(config_path, pactl, evdev, uinput, midi_out):
    action_map = {}
    led_handler = NanoLedHandler(port=midi_out)

    config_object = configparser.ConfigParser()
    config_object.optionxform = str

    try:
        if not config_object.read(config_path):
            logging.error(f'parse_config: Failed to load config file {config_path}')
            return None

        # ... (rest of the function remains unchanged)
    except Exception as e:
        logging.error(f'Error in parse_config: {e}')

    return action_map

def main():
    try:
        parser = argparse.ArgumentParser()
        parser.add_argument('-d', '--debug', action='store_true', help='Enable debug output')
        parser.add_argument('-c', '--config', default=expanduser('~/.config/nanoKontroller.ini'), help='Path to config file')
        parser.add_argument('-l', '--list-devices', action='store_true', help='List all PulseAudio devices')
        args = parser.parse_args()

        if args.debug:
            logging.basicConfig(format='%(asctime)-15s %(levelname)-8s %(message)s', level=logging.DEBUG)
        else:
            logging.basicConfig(format='%(asctime)-15s %(levelname)-8s %(message)s', level=logging.INFO)

        logging.debug('Starting up')

        pactl = Pulse('nanoKontroller')

        if args.list_devices:
            for device in pactl.sink_list():
                print(f'output: {device.name}')
            for device in pactl.source_list():
                print(f'input: {device.name}')
            sys.exit(0)

        ui = uinput.UInput()
        input_names = mido.get_input_names()
        match = next((name for name in input_names if 'nanoKONTROL2' in name), None)

        if not match:
            logging.error('nanoKONTROL2 device not found.')
            sys.exit(1)

        inport = mido.open_input(match)
        outport = mido.open_output(match)

        logging.debug(f'Trying to load config from {args.config}')
        action_map = parse_config(args.config, pactl, e, ui, outport)

        for msg in inport:
            if msg.type == 'control_change':
                logging.debug(f'Keypress {msg.control} value {msg.value}')
                if msg.control in action_map:
                    action_map[msg.control].action(key=msg.control, value=msg.value)
            else:
                logging.debug(f'Got other message, type {msg.type}')

    except Exception as ex:
        logging.error(f'Error in main: {ex}')

if __name__ == "__main__":
    main()